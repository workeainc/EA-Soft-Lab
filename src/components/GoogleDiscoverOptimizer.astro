---
// Google Discover Optimization Component
// Implements high-res featured images and evergreen content targeting

export interface Props {
  title: string;
  description: string;
  image: string;
  publishDate: string;
  updateDate?: string;
  category: string;
  tags: string[];
  evergreen: boolean;
  featuredImageWidth?: number;
  featuredImageHeight?: number;
}

const {
  title,
  description,
  image,
  publishDate,
  updateDate = publishDate,
  category,
  tags,
  evergreen = true,
  featuredImageWidth = 1200,
  featuredImageHeight = 630
} = Astro.props;

// Calculate content freshness score
const publishDateObj = new Date(publishDate);
const updateDateObj = new Date(updateDate);
const now = new Date();
const daysSinceUpdate = Math.floor((now - updateDateObj) / (1000 * 60 * 60 * 24));
const freshnessScore = Math.max(0, 100 - daysSinceUpdate);

// Determine if content is evergreen
const isEvergreen = evergreen && daysSinceUpdate < 365;
---

<!-- Google Discover Optimization -->
<meta name="robots" content="max-image-preview:large" />
<meta name="article:published_time" content={publishDate} />
<meta name="article:modified_time" content={updateDate} />
<meta name="article:section" content={category} />
<meta name="article:tag" content={tags.join(', ')} />

<!-- High-resolution featured image for Discover -->
<link rel="preload" as="image" href={image} />
<meta property="og:image" content={image} />
<meta property="og:image:width" content={featuredImageWidth.toString()} />
<meta property="og:image:height" content={featuredImageHeight.toString()} />
<meta property="og:image:alt" content={title} />
<meta property="og:image:type" content="image/jpeg" />

<!-- Twitter Card optimization for Discover -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:image" content={image} />
<meta name="twitter:image:alt" content={title} />

<!-- Additional Discover-specific meta tags -->
<meta name="discover:content_type" content={isEvergreen ? "evergreen" : "news"} />
<meta name="discover:category" content={category} />
<meta name="discover:tags" content={tags.join(', ')} />
<meta name="discover:freshness_score" content={freshnessScore.toString()} />

<!-- Structured data for Discover -->
<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": title,
  "description": description,
  "image": {
    "@type": "ImageObject",
    "url": image,
    "width": featuredImageWidth,
    "height": featuredImageHeight
  },
  "datePublished": publishDate,
  "dateModified": updateDate,
  "author": {
    "@type": "Organization",
    "name": "EA Soft Lab"
  },
  "publisher": {
    "@type": "Organization",
    "name": "EA Soft Lab",
    "logo": {
      "@type": "ImageObject",
      "url": "https://easoftlab.com/logo.png"
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": Astro.url.href
  },
  "articleSection": category,
  "keywords": tags.join(', '),
  "isAccessibleForFree": true,
  "isPartOf": {
    "@type": "WebSite",
    "name": "EA Soft Lab",
    "url": "https://easoftlab.com"
  }
})}></script>

<!-- Discover-specific CSS for better presentation -->
<style>
  /* Optimize for Discover feed presentation */
  .discover-optimized {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  /* High-resolution image optimization */
  .discover-image {
    width: 100%;
    height: auto;
    min-height: 300px;
    object-fit: cover;
    background: linear-gradient(45deg, #f0f0f0, #e0e0e0);
  }
  
  /* Content freshness indicator */
  .freshness-indicator {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
  }
  
  /* Evergreen content badge */
  .evergreen-badge {
    position: absolute;
    top: 10px;
    left: 10px;
    background: #4CAF50;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
  }
</style>

<!-- Discover optimization script -->
<script>
  // Track Discover performance
  if ('performance' in window) {
    // Monitor image loading performance
    const imageObserver = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.name.includes('discover-image')) {
          console.log('Discover image loaded:', entry.duration);
          
          // Send to analytics
          if (window.gtag) {
            gtag('event', 'discover_image_load', {
              event_category: 'Google Discover',
              event_label: 'Image Load Time',
              value: Math.round(entry.duration)
            });
          }
        }
      }
    });
    
    imageObserver.observe({ entryTypes: ['resource'] });
  }
  
  // Optimize for Discover feed
  document.addEventListener('DOMContentLoaded', () => {
    // Add lazy loading for Discover images
    const images = document.querySelectorAll('.discover-image');
    images.forEach(img => {
      img.loading = 'lazy';
      img.decoding = 'async';
    });
    
    // Add freshness indicators
    const freshnessScore = {freshnessScore};
    if (freshnessScore < 50) {
      const indicator = document.createElement('div');
      indicator.className = 'freshness-indicator';
      indicator.textContent = `${freshnessScore}% fresh`;
      document.querySelector('.discover-optimized')?.appendChild(indicator);
    }
    
    // Add evergreen badge
    if ({isEvergreen}) {
      const badge = document.createElement('div');
      badge.className = 'evergreen-badge';
      badge.textContent = 'Evergreen';
      document.querySelector('.discover-optimized')?.appendChild(badge);
    }
  });
</script>
