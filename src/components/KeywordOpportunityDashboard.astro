---
export interface Props {
  enableDashboard?: boolean;
  showRealTimeMonitoring?: boolean;
  allowBulkAnalysis?: boolean;
  maxCompetitors?: number;
}

const {
  enableDashboard = true,
  showRealTimeMonitoring = true,
  allowBulkAnalysis = true,
  maxCompetitors = 10
} = Astro.props;
---

{enableDashboard && (
  <div id="keyword-opportunity-dashboard" class="keyword-dashboard">
    <div class="dashboard-header">
      <h2>Keyword Opportunity Monitor</h2>
      <div class="monitoring-status">
        <span class="status-indicator active"></span>
        <span class="status-text">Monitoring Active</span>
      </div>
    </div>

    <div class="dashboard-content">
      <!-- Keyword Analysis Controls -->
      <div class="analysis-controls">
        <h3>Keyword Analysis</h3>
        
        <div class="control-group">
          <button id="analyze-competitors-btn" class="action-btn">
            Analyze Competitors
          </button>
          <button id="find-opportunities-btn" class="action-btn">
            Find Opportunities
          </button>
          <button id="generate-report-btn" class="action-btn">
            Generate Report
          </button>
        </div>
        
        <div class="control-group">
          <label for="timeframe-select">Timeframe:</label>
          <select id="timeframe-select" class="form-select">
            <option value="1">Last 1 month</option>
            <option value="3">Last 3 months</option>
            <option value="6">Last 6 months</option>
            <option value="12" selected>Last 12 months</option>
          </select>
        </div>
      </div>

      <!-- Keyword Opportunities -->
      <div class="opportunities-section">
        <h3>Top Keyword Opportunities</h3>
        <div id="opportunities-container" class="opportunities-container">
          <div class="no-data">
            <p>No keyword opportunities found yet. Click "Find Opportunities" to start analysis.</p>
          </div>
        </div>
      </div>

      <!-- Competitor Analysis -->
      <div class="competitor-section">
        <h3>Competitor Analysis</h3>
        <div id="competitor-container" class="competitor-container">
          <div class="no-data">
            <p>No competitor analysis available. Click "Analyze Competitors" to start.</p>
          </div>
        </div>
      </div>

      <!-- Keyword Alerts -->
      <div class="alerts-section">
        <h3>Keyword Alerts</h3>
        <div id="alerts-container" class="alerts-container">
          <div class="no-data">
            <p>No alerts generated yet. Run analysis to see alerts.</p>
          </div>
        </div>
      </div>

      <!-- Competitor Gaps -->
      <div class="gaps-section">
        <h3>Competitor Gaps</h3>
        <div id="gaps-container" class="gaps-container">
          <div class="no-data">
            <p>No gap analysis available. Run competitor analysis to see gaps.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
)}

<style>
  .keyword-dashboard {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin: 2rem 0;
    overflow: hidden;
  }

  .dashboard-header {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
    padding: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .dashboard-header h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .monitoring-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #10b981;
    animation: pulse 2s infinite;
  }

  .dashboard-content {
    padding: 2rem;
  }

  .analysis-controls {
    background: #f0fdf4;
    padding: 1.5rem;
    border-radius: 8px;
    margin-bottom: 2rem;
    border: 1px solid #bbf7d0;
  }

  .analysis-controls h3 {
    margin: 0 0 1rem 0;
    color: #166534;
  }

  .control-group {
    display: flex;
    gap: 1rem;
    align-items: center;
    margin-bottom: 1rem;
  }

  .action-btn {
    background: #10b981;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
  }

  .action-btn:hover {
    background: #059669;
    transform: translateY(-1px);
  }

  .action-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .form-select {
    padding: 0.5rem;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    background: white;
  }

  .opportunities-section,
  .competitor-section,
  .alerts-section,
  .gaps-section {
    margin-bottom: 2rem;
  }

  .opportunities-section h3,
  .competitor-section h3,
  .alerts-section h3,
  .gaps-section h3 {
    margin: 0 0 1rem 0;
    color: #1f2937;
  }

  .opportunities-container,
  .competitor-container,
  .alerts-container,
  .gaps-container {
    min-height: 200px;
  }

  .no-data {
    text-align: center;
    color: #6b7280;
    padding: 2rem;
  }

  .opportunity-item {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .opportunity-info {
    flex: 1;
  }

  .opportunity-keyword {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.25rem;
  }

  .opportunity-metrics {
    display: flex;
    gap: 1rem;
    font-size: 0.875rem;
    color: #6b7280;
  }

  .opportunity-score {
    background: #10b981;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-weight: 600;
    font-size: 0.875rem;
  }

  .competitor-item {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .competitor-name {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
  }

  .competitor-url {
    color: #6b7280;
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
  }

  .competitor-keywords {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .keyword-tag {
    background: #f3f4f6;
    color: #374151;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
  }

  .alert-item {
    background: #fef3c7;
    border: 1px solid #f59e0b;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .alert-type {
    font-weight: 600;
    color: #92400e;
    margin-bottom: 0.5rem;
  }

  .alert-message {
    color: #92400e;
    margin-bottom: 0.5rem;
  }

  .gap-item {
    background: #dbeafe;
    border: 1px solid #3b82f6;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .gap-keyword {
    font-weight: 600;
    color: #1e40af;
    margin-bottom: 0.25rem;
  }

  .gap-industry {
    color: #3b82f6;
    font-size: 0.875rem;
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  @media (max-width: 768px) {
    .dashboard-header {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .control-group {
      flex-direction: column;
      align-items: stretch;
    }

    .opportunity-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }
  }
</style>

<script>
  // Keyword Opportunity Dashboard JavaScript
  class KeywordOpportunityDashboard {
    constructor() {
      this.initializeElements();
      this.bindEvents();
      this.isAnalyzing = false;
    }

    initializeElements() {
      this.analyzeBtn = document.getElementById('analyze-competitors-btn');
      this.opportunitiesBtn = document.getElementById('find-opportunities-btn');
      this.reportBtn = document.getElementById('generate-report-btn');
      this.timeframeSelect = document.getElementById('timeframe-select');
      this.opportunitiesContainer = document.getElementById('opportunities-container');
      this.competitorContainer = document.getElementById('competitor-container');
      this.alertsContainer = document.getElementById('alerts-container');
      this.gapsContainer = document.getElementById('gaps-container');
    }

    bindEvents() {
      this.analyzeBtn.addEventListener('click', () => this.analyzeCompetitors());
      this.opportunitiesBtn.addEventListener('click', () => this.findOpportunities());
      this.reportBtn.addEventListener('click', () => this.generateReport());
    }

    async analyzeCompetitors() {
      if (this.isAnalyzing) return;
      
      this.setLoading(true);
      
      try {
        const response = await fetch('/api/keyword-opportunities', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'analyze_competitors' })
        });

        const result = await response.json();
        
        if (result.success) {
          this.displayCompetitorAnalysis(result.data);
        } else {
          alert(`Error: ${result.error}`);
        }
      } catch (error) {
        console.error('Competitor analysis error:', error);
        alert('Failed to analyze competitors. Please try again.');
      } finally {
        this.setLoading(false);
      }
    }

    async findOpportunities() {
      if (this.isAnalyzing) return;
      
      this.setLoading(true);
      
      try {
        const response = await fetch('/api/keyword-opportunities', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            action: 'find_opportunities',
            timeframe: this.timeframeSelect.value
          })
        });

        const result = await response.json();
        
        if (result.success) {
          this.displayOpportunities(result.data);
        } else {
          alert(`Error: ${result.error}`);
        }
      } catch (error) {
        console.error('Opportunity analysis error:', error);
        alert('Failed to find opportunities. Please try again.');
      } finally {
        this.setLoading(false);
      }
    }

    async generateReport() {
      if (this.isAnalyzing) return;
      
      this.setLoading(true);
      
      try {
        const response = await fetch('/api/keyword-opportunities', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'generate_report' })
        });

        const result = await response.json();
        
        if (result.success) {
          this.displayFullReport(result.data);
        } else {
          alert(`Error: ${result.error}`);
        }
      } catch (error) {
        console.error('Report generation error:', error);
        alert('Failed to generate report. Please try again.');
      } finally {
        this.setLoading(false);
      }
    }

    displayOpportunities(opportunities) {
      if (!opportunities || opportunities.length === 0) {
        this.opportunitiesContainer.innerHTML = '<div class="no-data"><p>No opportunities found.</p></div>';
        return;
      }

      const html = opportunities.map(opportunity => `
        <div class="opportunity-item">
          <div class="opportunity-info">
            <div class="opportunity-keyword">${opportunity.keyword}</div>
            <div class="opportunity-metrics">
              <span>Trend: ${Math.round(opportunity.trend)}</span>
              <span>Volume: ${opportunity.searchVolume.toLocaleString()}</span>
              <span>Difficulty: ${opportunity.difficulty}</span>
              <span>Category: ${opportunity.category}</span>
            </div>
          </div>
          <div class="opportunity-score">${Math.round(opportunity.opportunity)}</div>
        </div>
      `).join('');

      this.opportunitiesContainer.innerHTML = html;
    }

    displayCompetitorAnalysis(analysis) {
      if (!analysis || Object.keys(analysis).length === 0) {
        this.competitorContainer.innerHTML = '<div class="no-data"><p>No competitor analysis available.</p></div>';
        return;
      }

      const html = Object.entries(analysis).map(([name, data]) => `
        <div class="competitor-item">
          <div class="competitor-name">${name}</div>
          <div class="competitor-url">${data.url}</div>
          <div class="competitor-keywords">
            ${data.keywords.slice(0, 10).map(keyword => 
              `<span class="keyword-tag">${keyword}</span>`
            ).join('')}
          </div>
        </div>
      `).join('');

      this.competitorContainer.innerHTML = html;
    }

    displayFullReport(report) {
      // Display opportunities
      this.displayOpportunities(report.opportunities);
      
      // Display competitor analysis
      this.displayCompetitorAnalysis(report.competitorAnalysis);
      
      // Display alerts
      this.displayAlerts(report.alerts);
      
      // Display gaps
      this.displayGaps(report.competitorGaps);
    }

    displayAlerts(alerts) {
      if (!alerts || alerts.length === 0) {
        this.alertsContainer.innerHTML = '<div class="no-data"><p>No alerts generated.</p></div>';
        return;
      }

      const html = alerts.map(alert => `
        <div class="alert-item">
          <div class="alert-type">${alert.type.replace('_', ' ').toUpperCase()}</div>
          <div class="alert-message">${alert.message}</div>
          <div class="competitor-keywords">
            ${alert.keywords.map(k => `<span class="keyword-tag">${k.keyword}</span>`).join('')}
          </div>
        </div>
      `).join('');

      this.alertsContainer.innerHTML = html;
    }

    displayGaps(gaps) {
      if (!gaps || gaps.length === 0) {
        this.gapsContainer.innerHTML = '<div class="no-data"><p>No gap analysis available.</p></div>';
        return;
      }

      const html = gaps.map(gap => `
        <div class="gap-item">
          <div class="gap-keyword">${gap.keyword}</div>
          <div class="gap-industry">${gap.industry}</div>
          <div class="gap-reason">${gap.reason}</div>
        </div>
      `).join('');

      this.gapsContainer.innerHTML = html;
    }

    setLoading(loading) {
      this.isAnalyzing = loading;
      
      const buttons = [this.analyzeBtn, this.opportunitiesBtn, this.reportBtn];
      
      buttons.forEach(btn => {
        btn.disabled = loading;
        btn.textContent = loading ? 'Analyzing...' : btn.getAttribute('data-original-text') || btn.textContent;
      });
      
      if (!loading) {
        this.analyzeBtn.textContent = 'Analyze Competitors';
        this.opportunitiesBtn.textContent = 'Find Opportunities';
        this.reportBtn.textContent = 'Generate Report';
      }
    }
  }

  // Initialize dashboard when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new KeywordOpportunityDashboard();
  });
</script> 