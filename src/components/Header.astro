---
// Navigation items with dropdowns
const navItems = [
  { href: '/', label: 'Home' },
  { 
    href: '/services', 
    label: 'Services',
    dropdown: [
      { href: '/services/web-development', label: 'Web Development' },
      { href: '/services/mobile-development', label: 'Mobile App Development' },
      { href: '/services/custom-software', label: 'Custom Software Solutions' },
      { href: '/services/ui-ux-design', label: 'UI/UX Design' },
      { href: '/services/saas-development', label: 'SaaS Development' },
      { href: '/services/crm-erp', label: 'CRM/ERP Development' },
      { href: '/services/image-tools', label: 'Image Post-Production Tools' }
    ]
  },
  { 
    href: '/products', 
    label: 'Products',
    dropdown: [
      { href: '/products/saas-platform', label: 'SaaS Platform' },
      { href: '/products/tools', label: 'Development Tools' },
      { href: '/products/coming-soon', label: 'Coming Soon' }
    ]
  },
  { 
    href: '/industries', 
    label: 'Industries',
    dropdown: [
      { href: '/industries/ecommerce', label: 'E-commerce' },
      { href: '/industries/real-estate', label: 'Real Estate' },
      { href: '/industries/healthcare', label: 'Healthcare' },
      { href: '/industries/education', label: 'Education' },
      { href: '/industries/logistics', label: 'Logistics' },
      { href: '/industries/media-entertainment', label: 'Media & Entertainment' }
    ]
  },
  { href: '/portfolio', label: 'Portfolio' },
  { 
    href: '/about', 
    label: 'About',
    dropdown: [
      { href: '/about/company', label: 'Company Overview' },
      { href: '/about/team', label: 'Our Team' },
      { href: '/about/careers', label: 'Careers' },
      { href: '/about/culture', label: 'Culture & Values' }
    ]
  },
  { href: '/blog', label: 'Blog' },
  { href: '/contact', label: 'Contact' }
];
---

<header class="fixed top-0 left-0 right-0 z-[9999] bg-secondary-950/80 backdrop-blur-md border-b border-secondary-800/50 shadow-lg">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center space-x-2">
          <div class="w-8 h-8 bg-gradient-to-r from-primary-500 to-accent-500 rounded-lg flex items-center justify-center shadow-lg">
            <span class="text-white font-bold text-sm">EA</span>
          </div>
          <span class="text-xl font-bold bg-gradient-to-r from-primary-400 to-accent-400 bg-clip-text text-transparent">EA Soft Lab</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex space-x-8">
        {navItems.map((item) => (
          <div class="relative group">
            <a
              href={item.href}
              class="text-secondary-300 hover:text-white px-3 py-2 text-sm font-medium transition-colors duration-200 flex items-center"
            >
              {item.label}
              {item.dropdown && (
                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              )}
            </a>
            
            {item.dropdown && (
              <div class="absolute top-full left-0 mt-1 w-64 bg-secondary-800/95 backdrop-blur-md border border-secondary-700 rounded-lg shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-[999999]">
                <div class="py-2">
                  {item.dropdown.map((dropdownItem) => (
                    <a
                      href={dropdownItem.href}
                      class="block px-4 py-2 text-sm text-secondary-300 hover:bg-secondary-700/50 hover:text-white transition-colors duration-200"
                    >
                      {dropdownItem.label}
                    </a>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </nav>

      <!-- CTA Button -->
      <div class="hidden lg:block">
        <a
          href="/contact"
          class="bg-gradient-to-r from-primary-500 to-accent-500 hover:from-primary-600 hover:to-accent-600 text-white px-6 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
        >
          Get Started
        </a>
      </div>

      <!-- Mobile menu button -->
      <div class="lg:hidden">
        <button
          id="mobile-menu-button"
          type="button"
          class="mobile-menu-btn text-secondary-300 hover:text-white p-2 rounded-lg hover:bg-secondary-800/50 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500"
          aria-label="Toggle mobile menu"
          aria-expanded="false"
        >
          <svg id="hamburger-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
          <svg id="close-icon" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="mobile-menu hidden lg:hidden bg-secondary-900/95 backdrop-blur-md border-t border-secondary-700/50 shadow-lg">
      <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
        {navItems.map((item) => (
          <div class="space-y-1">
            <a
              href={item.href}
              class="text-secondary-300 hover:text-white block px-3 py-2 text-base font-medium transition-colors duration-200"
            >
              {item.label}
            </a>
            {item.dropdown && (
              <div class="ml-4 space-y-1">
                {item.dropdown.map((dropdownItem) => (
                  <a
                    href={dropdownItem.href}
                    class="text-secondary-400 hover:text-white block px-3 py-1 text-sm transition-colors duration-200"
                  >
                    {dropdownItem.label}
                  </a>
                ))}
              </div>
            )}
          </div>
        ))}
        <a
          href="/contact"
          class="bg-gradient-to-r from-primary-500 to-accent-500 hover:from-primary-600 hover:to-accent-600 text-white block px-3 py-2 rounded-lg text-base font-medium transition-all duration-200 mt-4 shadow-lg"
        >
          Get Started
        </a>
      </div>
    </div>
  </div>
</header>

<style>
  /* Ensure mobile menu button is always clickable */
  .mobile-menu-btn {
    position: relative;
    z-index: 10000;
    cursor: pointer;
    user-select: none;
    -webkit-tap-highlight-color: transparent;
  }
  
  /* Ensure mobile menu is properly positioned */
  .mobile-menu {
    position: relative;
    z-index: 9998;
    max-height: calc(100vh - 4rem);
    overflow-y: auto;
  }
  
  /* Prevent body scroll when menu is open */
  body.menu-open {
    overflow: hidden;
  }
</style>

<script>
  // Enhanced mobile menu functionality
  (function() {
    'use strict';
    
    // Global variables
    let isMenuOpen = false;
    let mobileMenuButton = null;
    let mobileMenu = null;
    let hamburgerIcon = null;
    let closeIcon = null;
    
    // Initialize mobile menu
    function initMobileMenu() {
      console.log('üîß Initializing mobile menu...');
      
      // Get elements
      mobileMenuButton = document.getElementById('mobile-menu-button');
      mobileMenu = document.getElementById('mobile-menu');
      hamburgerIcon = document.getElementById('hamburger-icon');
      closeIcon = document.getElementById('close-icon');
      
      // Validate elements exist
      if (!mobileMenuButton) {
        console.error('‚ùå Mobile menu button not found');
        return false;
      }
      
      if (!mobileMenu) {
        console.error('‚ùå Mobile menu not found');
        return false;
      }
      
      if (!hamburgerIcon || !closeIcon) {
        console.error('‚ùå Menu icons not found');
        return false;
      }
      
      console.log('‚úÖ All mobile menu elements found');
      
      // Add event listeners
      setupEventListeners();
      
      return true;
    }
    
    // Setup all event listeners
    function setupEventListeners() {
      // Main button click
      mobileMenuButton.addEventListener('click', handleMenuClick, { passive: false });
      
      // Touch events for mobile
      mobileMenuButton.addEventListener('touchstart', handleTouchStart, { passive: false });
      mobileMenuButton.addEventListener('touchend', handleTouchEnd, { passive: false });
      
      // Keyboard events
      document.addEventListener('keydown', handleKeydown);
      
      // Click outside to close
      document.addEventListener('click', handleOutsideClick);
      
      // Window resize
      window.addEventListener('resize', handleResize);
      
      // Prevent menu button from being affected by other clicks
      mobileMenuButton.addEventListener('click', function(e) {
        e.stopPropagation();
      });
      
      console.log('‚úÖ Event listeners attached');
    }
    
    // Handle menu button click
    function handleMenuClick(e) {
      e.preventDefault();
      e.stopPropagation();
      
      console.log('üñ±Ô∏è Menu button clicked');
      toggleMenu();
    }
    
    // Handle touch events
    function handleTouchStart(e) {
      e.preventDefault();
      console.log('üì± Touch start on menu button');
    }
    
    function handleTouchEnd(e) {
      e.preventDefault();
      console.log('üì± Touch end on menu button');
      toggleMenu();
    }
    
    // Handle keyboard events
    function handleKeydown(e) {
      if (e.key === 'Escape' && isMenuOpen) {
        console.log('‚å®Ô∏è Escape key pressed - closing menu');
        closeMenu();
      }
    }
    
    // Handle clicks outside menu
    function handleOutsideClick(e) {
      if (isMenuOpen && !mobileMenuButton.contains(e.target) && !mobileMenu.contains(e.target)) {
        console.log('üñ±Ô∏è Click outside menu - closing');
        closeMenu();
      }
    }
    
    // Handle window resize
    function handleResize() {
      if (window.innerWidth >= 1024 && isMenuOpen) {
        console.log('üì± Window resized to desktop - closing menu');
        closeMenu();
      }
    }
    
    // Toggle menu state
    function toggleMenu() {
      console.log('üîÑ Toggling menu, current state:', isMenuOpen);
      
      if (isMenuOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    }
    
    // Open menu
    function openMenu() {
      if (isMenuOpen) return;
      
      console.log('üìÇ Opening mobile menu');
      
      // Update menu state
      isMenuOpen = true;
      
      // Update button state
      mobileMenuButton.setAttribute('aria-expanded', 'true');
      
      // Show/hide icons
      hamburgerIcon.classList.add('hidden');
      closeIcon.classList.remove('hidden');
      
      // Show menu
      mobileMenu.classList.remove('hidden');
      mobileMenu.classList.add('block');
      
      // Prevent body scroll
      document.body.classList.add('menu-open');
      
      console.log('‚úÖ Menu opened successfully');
    }
    
    // Close menu
    function closeMenu() {
      if (!isMenuOpen) return;
      
      console.log('üìÇ Closing mobile menu');
      
      // Update menu state
      isMenuOpen = false;
      
      // Update button state
      mobileMenuButton.setAttribute('aria-expanded', 'false');
      
      // Show/hide icons
      hamburgerIcon.classList.remove('hidden');
      closeIcon.classList.add('hidden');
      
      // Hide menu
      mobileMenu.classList.remove('block');
      mobileMenu.classList.add('hidden');
      
      // Restore body scroll
      document.body.classList.remove('menu-open');
      
      console.log('‚úÖ Menu closed successfully');
    }
    
    // Initialize when DOM is ready
    function initialize() {
      console.log('üöÄ Starting mobile menu initialization...');
      
      // Try multiple initialization strategies
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
          console.log('üìÑ DOM Content Loaded - initializing mobile menu');
          if (!initMobileMenu()) {
            // Retry after a short delay
            setTimeout(initMobileMenu, 100);
          }
        });
      } else {
        console.log('üìÑ DOM already loaded - initializing mobile menu immediately');
        if (!initMobileMenu()) {
          // Retry after a short delay
          setTimeout(initMobileMenu, 100);
        }
      }
      
      // Backup initialization on window load
      window.addEventListener('load', function() {
        console.log('üåê Window loaded - ensuring mobile menu is initialized');
        if (!initMobileMenu()) {
          // Final retry
          setTimeout(initMobileMenu, 500);
        }
      });
    }
    
    // Start initialization
    initialize();
    
    // Expose functions for debugging
    window.mobileMenuDebug = {
      init: initMobileMenu,
      open: openMenu,
      close: closeMenu,
      toggle: toggleMenu,
      isOpen: () => isMenuOpen
    };
    
  })();
</script> 