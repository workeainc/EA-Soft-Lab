---
// Core Web Vitals Monitor Component
---

<script>
  // Simple Core Web Vitals monitoring without external dependencies
  function monitorCoreWebVitals() {
    // Monitor Largest Contentful Paint (LCP)
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'largest-contentful-paint') {
            console.log('LCP:', entry.startTime);
            if (typeof gtag !== 'undefined') {
              gtag('event', 'LCP', {
                event_category: 'Web Vitals',
                value: Math.round(entry.startTime),
                non_interaction: true,
              });
            }
          }
        }
      });
      observer.observe({ entryTypes: ['largest-contentful-paint'] });
    }

    // Monitor First Input Delay (FID)
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'first-input') {
            console.log('FID:', entry.processingStart - entry.startTime);
            if (typeof gtag !== 'undefined') {
              gtag('event', 'FID', {
                event_category: 'Web Vitals',
                value: Math.round(entry.processingStart - entry.startTime),
                non_interaction: true,
              });
            }
          }
        }
      });
      observer.observe({ entryTypes: ['first-input'] });
    }

    // Monitor Cumulative Layout Shift (CLS)
    let clsValue = 0;
    let clsEntries = [];

    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (!entry.hadRecentInput) {
            clsValue += entry.value;
            clsEntries.push(entry);
          }
        }
        console.log('CLS:', clsValue);
        if (typeof gtag !== 'undefined') {
          gtag('event', 'CLS', {
            event_category: 'Web Vitals',
            value: Math.round(clsValue * 1000),
            non_interaction: true,
          });
        }
      });
      observer.observe({ entryTypes: ['layout-shift'] });
    }
  }

  // Initialize monitoring
  monitorCoreWebVitals();

  // Additional performance monitoring
  window.addEventListener('load', () => {
    // Page load time
    const loadTime = performance.now();
    console.log('Page Load Time:', loadTime.toFixed(2), 'ms');

    // Send to analytics
    if (typeof gtag !== 'undefined') {
      gtag('event', 'page_load_time', {
        event_category: 'Performance',
        value: Math.round(loadTime),
        non_interaction: true,
      });
    }
  });

  // Monitor user interactions
  let interactionCount = 0;
  const interactionEvents = ['click', 'scroll', 'input', 'submit'];

  interactionEvents.forEach(eventType => {
    document.addEventListener(eventType, () => {
      interactionCount++;
      
      // Send interaction data every 10 interactions
      if (interactionCount % 10 === 0) {
        if (typeof gtag !== 'undefined') {
          gtag('event', 'user_interaction', {
            event_category: 'Engagement',
            event_label: eventType,
            value: interactionCount,
          });
        }
      }
    });
  });
</script>
