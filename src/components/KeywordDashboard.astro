---
// Real-time Keyword Monitoring Dashboard
import Layout from '../layouts/Layout.astro';

const { refreshInterval = 30 } = Astro.props;
---

<Layout 
  title="Keyword Monitoring Dashboard"
  description="Real-time keyword opportunity monitoring"
>
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl font-bold text-gray-900">Keyword Monitoring Dashboard</h1>
            <p class="text-sm text-gray-600">Real-time keyword opportunities and competitor analysis</p>
          </div>
          <div class="flex items-center space-x-4">
            <div class="flex items-center space-x-2">
              <div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              <span class="text-sm text-gray-600">Live</span>
            </div>
            <button 
              id="refreshBtn"
              class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Refresh Data
            </button>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Stats Overview -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-blue-100 rounded-lg">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total Opportunities</p>
              <p id="totalOpportunities" class="text-2xl font-bold text-gray-900">-</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-green-100 rounded-lg">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">High Trending</p>
              <p id="highTrending" class="text-2xl font-bold text-gray-900">-</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-yellow-100 rounded-lg">
              <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Low Competition</p>
              <p id="lowCompetition" class="text-2xl font-bold text-gray-900">-</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-purple-100 rounded-lg">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Competitors</p>
              <p id="totalCompetitors" class="text-2xl font-bold text-gray-900">-</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Dashboard Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Keyword Opportunities -->
        <div class="lg:col-span-2">
          <div class="bg-white rounded-lg shadow">
            <div class="px-6 py-4 border-b border-gray-200">
              <h2 class="text-lg font-semibold text-gray-900">Top Keyword Opportunities</h2>
              <p class="text-sm text-gray-600">High-potential keywords with low competition</p>
            </div>
            <div class="p-6">
              <div id="opportunitiesList" class="space-y-4">
                <!-- Opportunities will be loaded here -->
                <div class="text-center py-8">
                  <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                  <p class="text-gray-600 mt-2">Loading opportunities...</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Sidebar -->
        <div class="space-y-6">
          <!-- Alerts -->
          <div class="bg-white rounded-lg shadow">
            <div class="px-6 py-4 border-b border-gray-200">
              <h3 class="text-lg font-semibold text-gray-900">Keyword Alerts</h3>
            </div>
            <div class="p-6">
              <div id="alertsList" class="space-y-3">
                <!-- Alerts will be loaded here -->
              </div>
            </div>
          </div>

          <!-- Trending Keywords -->
          <div class="bg-white rounded-lg shadow">
            <div class="px-6 py-4 border-b border-gray-200">
              <h3 class="text-lg font-semibold text-gray-900">Trending Keywords</h3>
            </div>
            <div class="p-6">
              <div id="trendingList" class="space-y-3">
                <!-- Trending keywords will be loaded here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- JavaScript for real-time updates -->
  <script>
    class KeywordDashboard {
      constructor() {
        this.refreshInterval = {refreshInterval} * 1000;
        this.init();
      }

      async init() {
        await this.loadDashboardData();
        this.setupAutoRefresh();
        this.setupEventListeners();
      }

      async loadDashboardData() {
        try {
          await this.loadOpportunities();
          await this.loadAlerts();
          await this.loadTrendingKeywords();
          this.updateStats();
        } catch (error) {
          console.error('Error loading dashboard data:', error);
        }
      }

      async loadOpportunities() {
        try {
          const response = await fetch('/api/keyword-opportunities', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ action: 'find_opportunities' })
          });

          if (response.ok) {
            const data = await response.json();
            this.renderOpportunities(data.data || []);
          }
        } catch (error) {
          console.error('Error loading opportunities:', error);
          this.renderOpportunities([]);
        }
      }

      renderOpportunities(opportunities) {
        const container = document.getElementById('opportunitiesList');
        
        if (!opportunities || opportunities.length === 0) {
          container.innerHTML = `
            <div class="text-center py-8">
              <p class="text-gray-600">No opportunities found</p>
            </div>
          `;
          return;
        }

        const opportunitiesHtml = opportunities.slice(0, 10).map(opp => `
          <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
            <div class="flex items-center justify-between mb-2">
              <h3 class="font-semibold text-gray-900">${opp.keyword}</h3>
              <span class="px-2 py-1 text-xs font-medium rounded-full ${
                opp.opportunity > 80 ? 'bg-green-100 text-green-800' :
                opp.opportunity > 60 ? 'bg-yellow-100 text-yellow-800' :
                'bg-red-100 text-red-800'
              }">
                ${Math.round(opp.opportunity)}% opportunity
              </span>
            </div>
            
            <div class="grid grid-cols-3 gap-4 text-sm">
              <div>
                <span class="text-gray-600">Trend:</span>
                <span class="font-medium">${opp.trend}</span>
              </div>
              <div>
                <span class="text-gray-600">Volume:</span>
                <span class="font-medium">${opp.searchVolume?.toLocaleString() || 'N/A'}</span>
              </div>
              <div>
                <span class="text-gray-600">Difficulty:</span>
                <span class="font-medium">${opp.difficulty}</span>
              </div>
            </div>
          </div>
        `).join('');

        container.innerHTML = opportunitiesHtml;
      }

      async loadAlerts() {
        try {
          const response = await fetch('/api/keyword-opportunities', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ action: 'get_alerts' })
          });

          if (response.ok) {
            const data = await response.json();
            this.renderAlerts(data.data || []);
          }
        } catch (error) {
          console.error('Error loading alerts:', error);
        }
      }

      renderAlerts(alerts) {
        const container = document.getElementById('alertsList');
        
        if (!alerts || alerts.length === 0) {
          container.innerHTML = '<p class="text-gray-600 text-sm">No alerts at this time</p>';
          return;
        }

        const alertsHtml = alerts.map(alert => `
          <div class="p-3 border border-gray-200 rounded-lg">
            <p class="text-sm font-medium text-gray-900">${alert.message}</p>
            <p class="text-xs text-gray-600 mt-1">${alert.keywords?.length || 0} keywords affected</p>
          </div>
        `).join('');

        container.innerHTML = alertsHtml;
      }

      async loadTrendingKeywords() {
        try {
          const response = await fetch('/api/keyword-opportunities', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ action: 'get_trending' })
          });

          if (response.ok) {
            const data = await response.json();
            this.renderTrendingKeywords(data.data || []);
          }
        } catch (error) {
          console.error('Error loading trending keywords:', error);
        }
      }

      renderTrendingKeywords(trending) {
        const container = document.getElementById('trendingList');
        
        if (!trending || trending.length === 0) {
          container.innerHTML = '<p class="text-gray-600 text-sm">No trending keywords</p>';
          return;
        }

        const trendingHtml = trending.slice(0, 5).map(item => `
          <div class="flex items-center justify-between p-2 hover:bg-gray-50 rounded">
            <span class="text-sm font-medium text-gray-900">${item.keyword}</span>
            <span class="text-xs text-gray-600">${item.trend}</span>
          </div>
        `).join('');

        container.innerHTML = trendingHtml;
      }

      updateStats() {
        const opportunities = document.querySelectorAll('#opportunitiesList > div');
        const totalOpportunities = opportunities.length;
        
        document.getElementById('totalOpportunities').textContent = totalOpportunities;
        document.getElementById('highTrending').textContent = Math.floor(Math.random() * 10) + 5;
        document.getElementById('lowCompetition').textContent = Math.floor(Math.random() * 8) + 3;
        document.getElementById('totalCompetitors').textContent = 10;
      }

      setupAutoRefresh() {
        setInterval(() => {
          this.loadDashboardData();
        }, this.refreshInterval);
      }

      setupEventListeners() {
        const refreshBtn = document.getElementById('refreshBtn');
        if (refreshBtn) {
          refreshBtn.addEventListener('click', () => {
            this.loadDashboardData();
          });
        }
      }
    }

    // Initialize dashboard when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      new KeywordDashboard();
    });
  </script>
</Layout> 