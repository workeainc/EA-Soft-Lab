name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # Lint and Test
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Clean and reinstall dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/

  # Security and Quality Checks
  security-checks:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Clean and reinstall dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Run security audit (allow moderate)
        run: npm audit --audit-level=high || true

  # Deploy to Vercel (Production)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-checks]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://easoftlab.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Clean and reinstall dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Deploy to Vercel (Preview)
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-checks]
    if: github.event_name == 'pull_request'
    environment:
      name: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Clean and reinstall dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

  # Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-preview]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ] || [ "${{ needs.deploy-preview.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
